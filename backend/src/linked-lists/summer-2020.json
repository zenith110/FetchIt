{
 "Problem_Name": "(10 pts) DSN (Linked Lists)",
 "Seen_On": "Summer 2020",
 "Problem_Statement": "Suppose we have a linked list implemented with the structure below.\n The function below takes in a\npointer, head, to a linked list which is guaranteed to store data in strictly ascending order.\n If the list\ndoesn't contain the value 3, the function should create a struct node storing 3 in its data component, insert\nthe node so that the listed pointed to by head stores its data, including 3, in strictly ascending order, and\nreturns a pointer to the front of the resulting list.\n If a node already exists storing 3 in the list pointed to by\nhead, then return head and make no changes to the list.\n",
 "Problem_Code": "typedef struct node {\n int data;\n struct node* next;\n} node;\nnode* addValue3(node* head) {\n if ( __________________ || _______________________ ) {\n node* tmp = malloc(sizeof(node));\n tmp->data = 3;\n tmp->next = head;\n return tmp;\n }\n if ( _____________________ )\n return head;\n node* iter = head;\n while (iter->next != NULL && _________________________ )\n iter = ________________;\n if ( _______________________ && _____________________ )\n return head;\n node* tmp = malloc(sizeof(node));\n tmp->data = 3;\n tmp->next = ______________________ ;\n iter->next = _____________________ ;\n return __________________ ;\n}",
 "Solution": "node* addValue3(node* head) {\n if ( head == NULL || head->data > 3 ) {\n node* tmp = malloc(sizeof(node));\n tmp->data = 3;\n tmp->next = head;\n return tmp;\n }\n if ( head->data == 3 )\n return head;\n node* iter = head;\n while (iter->next != NULL && iter->next->data < 3 )\n iter = iter->next;\n if ( iter->next != NULL && iter->next->data == 3 )\n return head;\n node* tmp = malloc(sizeof(node));\n tmp->data = 3;\n tmp->next = iter->next;\n iter->next = tmp ;\n return head;\n}\nGrading: 1 pt per slot, record an integer grade. If two slots are partially correct, you may just take\n1 point off."
}
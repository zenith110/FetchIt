{
 "Problem_Name": "(5 pts) ALG (Stacks and Queues)\r",
 "Seen_On": "Spring 2019",
 "Problem_Statement": "Consider the following function, what will be the exact output of the function above? (You may assume the existence of all functions\nwritten in the code, such as createStack(), createQueue(), push(), pop(), and so on.\n): ",
 "Problem_Code": "void doTheThing(void)\n {\n int i, n = 9; // Note: There are 9 elements in the following array.\n int array[] = {3, 18, 58, 23, 12, 31, 19, 26, 3};\n Stack *s1 = createStack();\n Stack *s2 = createStack();\n Queue *q = createQueue();\n for (i = 0; i < n; i++)\n push(s1, array[i]);\n while (!isEmptyStack(s1))\n {\n while (!isEmptyStack(s1))\n enqueue(q, pop(s1)); // pop element from s1 and enqueue it in q\n while (!isEmptyQueue(q))\n push(s2, dequeue(q)); // dequeue from q and push onto s2\n printf(\"%d \", pop(s2)); // pop from s2 and print element\n while (!isEmptyStack(s2))\n push(s1, pop(s2)); // pop from s2 and push onto s1\n }\n printf(\"Tada!\\n\");\n freeStack(s1);\n freeStack(s2);\n freeQueue(q);\n }\r",
 "Solution": "Solution: 3 18 58 23 12 31 19 26 3 Tada!\n(This function just ends up printing the contents of the array in order.)\nGrading:\n5 points for the correct output\n4 points if their output was simply missing the \u201cTada!\u201d or if their output was off by one value\n2 points if they printed the array in reverse order.\n0 points otherwise.\nFeel free to award partial credit if you encounter something else that seems reasonable."
}
{
 "Problem_Name": "(10 pts) ALG (Stacks)",
 "Seen_On": "Spring 2018",
 "Problem_Statement": "Consider evaluating a postfix expression that only contained positive integer\noperands and the addition and subtraction operators.\n (Thus, there are no issues with order of operations!)\nWrite a function that evalulates such an expression.\n To make this question easier, assume that your\nfunction takes an array of integers, expr, storing the expression and the length of that array, len.\n In\nthe array of integers, all positive integers are operands while -1 represents an addition sign and -2\nrepresents a subtraction sign.\n Assume that you have a stack at your disposal with the following function\nsignatures.\n Furthermore, assume that the input expression is a valid postfix expression, so you don't have\nto ever check if you are attempting to pop an empty stack.\n Complete the evaluate function below.\n",
 "Problem_Code": "void init(stack* s); // Initializes the stack pointed to by s.\nvoid push(stack* s, int item); // Pushes item onto the stack pointed\n // to by s.\nint pop(stack* s); // Pops and returns the top value from the stack\n // pointed to by s.\nint eval(int* expr, int len) {\n stack s;\n init(&s);\n int i;",
 "Solution": "int eval(int* expr, int len) {\n stack s;\n init(&s);\n int i;\n for (i=0; i<len; i++) { // 1 pt\n if (expr[i] > 0) // 1 pt\n push(&s, expr[i]); // 1 pt\n else {\n int op2 = pop(&s); // 1 pt\n int op1 = pop(&s); // 1 pt\n if (expr[i] == -1) // 1 pt\n push(&s, op1+op2); // 1 pt\n else\n push(&s, op1-op2); // 2 pts (1 pt for order)\n }\n }\n return pop(&s); // 1 pt\n}"
}
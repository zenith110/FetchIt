{
 "Problem_Name": "(10 pts) DSN (Linked Lists)",
 "Seen_On": "Summer 2018",
 "Problem_Statement": "Suppose we have a linked list implemented with the structure below.\n Write a function that will take in a\npointer to the head of a list and inserts a node storing -1 after each even value in the list.\n If the list is empty\nor there are no even values in the list, no modifications should be made to the list.\n (For example, if the\ninitial list had 2, 6, 7, 1, 3, and 8, the resulting list would have 2, -1, 6, -1, 7, 1, 8, -1.\n)",
 "Problem_Code": "typedef struct node {\n int data;\n struct node* next;\n} node;\nvoid markEven(node *head)",
 "Solution": "void markEven(node *head) {\n node* tmp = head;\n while (tmp != NULL) { // 2 pts iter whole list\n while (tmp != NULL && tmp->data%2 != 0) //3pts find next even\n tmp = tmp->next;\n if (tmp != NULL) { // 1 pt no null error\n node* newnode = malloc(sizeof(node));\n newnode->data = -1; // 2 pts make new node\n newnode->next = tmp->next; // 2 pts patch it into\n tmp->next = newnode; // list\n tmp = newnode;\n }\n }\n}"
}
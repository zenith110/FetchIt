{
 "Problem_Name": "(10 pts) DSN (Linked Lists)",
 "Seen_On": "Fall 2019",
 "Problem_Statement": "An alternate method of storing a string is to store each letter of the string in a single node of a linked list,\nwith the first node of the list storing the first letter of the string.\n Using this method of storage, no null\ncharacter is needed since the next field of the node storing the last letter of the string would simply be a\nnull pointer.\n Write a function that takes in a pointer to a linked list storing a string and returns a pointer to\na traditional C string storing the same contents.\n Make sure to dynamically allocate your string in the\nfunction and null terminate it before returning the pointer to the string.\n Assume that a function, length,\nexists already that you can call in your solution, that takes in a pointer to a node and returns the length of\nthe list it points to.\n The prototype for this function is provided below after the struct definition.\n",
 "Problem_Code": "typedef struct node {\n char letter;\n struct node* next;\n} node;\nint length(node* head);\nchar* toCString(node * head)",
 "Solution": "char* toCString(node * head) {\n // Find length of the list.\n int len = length(head); // 1 pt\n // 2 pts \u2013 allocate space.\n char* res = malloc((len+1)*sizeof(char));\n int i=0; // 1 pt \u2013 init loop variable\n // Go through list \u2013 4 pts, 1 pt per line.\n while (head != NULL) {\n res[i] = head->letter;\n head = head->next;\n i++;\n }\n // 1 pt \u2013 null terminate string.\n res[len] = '\\0';\n // 1 pt \u2013 return pointer to string.\n return res;\n}\nNote: other solutions are possible, map points accordingly."
}
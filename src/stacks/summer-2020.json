{
 "Problem_Name": " (10 pts) DSN (Stacks)\r",
 "Seen_On": "Summer 2020",
 "Problem_Statement": "Suppose we have implemented a stack using a linked list.\n The structure of each node of the linked list is\nshown below.\n The stack structure contains a pointer to the head of a linked list and an integer, size, to\nindicate how many items are on the stack.\n\ntypedef struct node {\n int num;\n struct node* next;\n} node;\ntypedef struct stack {\n struct node *top;\n int size;\n} stack;\nThe generalized Towers of Hanoi game can be represented by numTowers stacks of integers, where the\nvalues in each stack represent the radii of the disks from the game for the corresponding tower.\n Recall that\na valid move involves taking a disk at the top of one stack and placing it on the top of another stack, so\nlong as that other stack is either empty or the disk currently at the top of the other stack is bigger than the\ndisk about to be placed on it.\n Complete the function below so that it takes in an array of three stacks\nrepresenting the contents of the three towers in Towers of Hanoi and prints out all of the valid moves that\ncould be made from that state, but doesn't move anything.\n You may assume that the array of stacks passed\ninto the function represent a valid state in a Towers of Hanoi game, where the value stored in the stack is\nthe corresponding disk radius and the disk radii range from 1 to n, for some positive integer n.\n Assume\nthat you have access to the following functions that involve a stack and that they work as described:\n// Returns the value stored at the top of the stack pointed to by s.\n If stack pointed to by s is empty, a\n// random value is returned.\n",
 "Problem_Code": "int peek(stack *s);\n// Returns 1 if the stack pointed to by s is empty, and 0 otherwise.\nint isEmpty(stack *s);\nvoid printValidMoves(stack towers[], int numTowers) {\n for (int i=0; i<numTowers; i++) {\n for (int j=0; j<numTowers; j++) {\n if ( _________________________ ) continue;\n if ( ____________ || _________________________________ )\n\n printf(\"Valid move from tower %d to tower %d.\\n\", i, j);\n }\n }\n}",
 "Solution": "int isEmpty(stack *s);\nvoid printValidMoves(stack towers[], int numTowers) {\n for (int i=0; i<numTowers; i++) {\n for (int j=0; j<numTowers; j++) {\n if ( isEmpty(&towers[i]) ) continue;\n if ( isEmpty(&towers[j]) || peek(&towers[i]) < peek(&towers[j]) )\n\n printf(\"Valid Move from tower %d to tower %d.\\n\", i, j);\n }\n }\n}\nGrading: 3 pts first slot, 3 pts second slot, 4 pts last slot"
}
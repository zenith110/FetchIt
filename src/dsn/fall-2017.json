{
 "Problem_Name": "(5 pts) DSN (Dynamic Memory Management in C)",
 "Seen_On": "Fall 2017",
 "Problem_Statement": "There is something terribly wrong with the code given below: it has two memory leaks.\n After carefully\ninspecting the code, answer the questions below.\n (a) (3 pts) Draw a picture that indicates the relevant state of memory after line 14 has completed.\n (Draw\na rectangular box to indicate dynamically allocated memory.\n) (b) (1 pt) Explain why line 14 causes a memory leak.\n (c) (1 pt) Why is it possible for the code to crash on line 21?",
 "Problem_Code": "int main(void) { char *str1 = malloc(sizeof(char) * 16); char *str2 = malloc(sizeof(char) * 16); str1[0] = 'p'; 7: str1[1] = 'a'; str1[2] = 's';  str1[3] = 's';  str1[4] = ',';  str1[5] = '\\0'; printf(\"%s \", str1); str2 = str1; printf(\"%s \", str2); str2 = NULL;  strcpy(str1, \"pass the exam!\"); printf(\"%s\\n\", str1); free(str1); free(str2); return 0;}",
 "Solution": "a)str1-> pass,\\0 Note: All cells left empty represent uninitialized character variables.\nGrading: 1 pt for having two boxes drawn indicating allocated memory. 1 pt for having str1 point to the\nbox that stores \"pass,\" (this must be indicated), 1 pt for having str2 point to this same box.\rb)When the pointer str2 moves, nothing is pointing to the memory that it used to be pointing to originally. c)str2 is pointing to NULL (nothing), so it's not pointing to dynamically allocated memory. Attempting to\nfree memory that isn't dynamically allocated may crash a program.\nGrading parts (b) and (c): Give the point for each if the answer is reasonably close or shows that the\nstudent understands the key issue at hand. No half points! Only award an integer number of points."
}
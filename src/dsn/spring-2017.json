{
 "Problem_Name": "(10 pts) DSN (Dynamic Memory Management in C)",
 "Seen_On": "Spring 2017",
 "Problem_Statement": "A catalogue of apps and their price is stored in a text file.\n Each line of the file contains the name of an\napp (1-19 letters) followed by its price with a space in between.\n Write a function called\nmakeAppArray that reads the app information from the file and stores it in an array of app pointers.\n\nYour function should take 2 parameters: a pointer to the file containing the app information and an\ninteger indicating the number of apps in the file.\n It should return a pointer to the array of apps.\n An app\nis stored in a struct as follows:",
 "Problem_Code": "typedef struct{\n char name[20];\n float price;\n} app;\nMake sure to allocate memory dynamically. The function signature is:\napp** makeAppArray(FILE* fp, int numApps) {}",
 "Solution": "app** makeAppArray(FILE* fp, int numApps) {\n app** appArray = (app**)malloc(numApps * sizeof(app*)); //3 pts\n int i;\n for(i=0; i < numApps; i++){\n appArray[i] = (app*)malloc(sizeof(app)); // 2 pts\n fscanf(fp, \"%s\", appArray[i]->name); // 2 pts\n fscanf(fp, \"%f\", &(appArray[i]->price)); // 2 pts\n }\n return appArray; // 1 pt\n}\nGrading notes: the casts aren't necessary, no points off for forgetting to declare i, no points off if\nonly one percent code is wrong, 1 pt off if both percent codes are wrong, take only 1 pt off total if\nthe syntax for reading from a file is incorrect, take off only 1 pt total if they use a dot instead of an\narray, they can order these statements differently - they can allocate ALL of the space before\nreading anything in."
}
{
 "Problem_Name": "(10 pts) DSN (Dynamic Memory Management in C)",
 "Seen_On": "Spring 2018",
 "Problem_Statement": "The struct, dataTOD, shown below, is used to collect data from different devices connected to the\nCPU.\n Every time the data is updated a new buffer containing the structure\u2019s data is created and\npopulated.\n\ntypedef struct dataTOD {\n int seconds; // seconds since midnight\n double data; // data sample\n char * dataName; // data name (optional)\n} dataTOD;\n(a) (8 pts) Write the code necessary to create and initialize the members of dataTOD in a function\nnamed init_dataTOD that returns a pointer to the newly created buffer.\n Return NULL in the\nevent a buffer cannot be created.\n Otherwise, set the seconds and data values according to the\ncorresponding input parameters to init_dataTOD, dynamically allocate the proper space for\ndataName and then copy the contents of name into it (not a pointer copy) and a return a pointer to\nthe newly created struct.\n(b) (2 pts) Complete the function below so that it frees all the dynamically allocated memory pointed to\nby its formal parameter zapThis.\n You may assume that the pointer itself is pointing to a valid struct\nand its dataName pointer is pointing to a dynamically allocated character array.\n",
 "Problem_Code": "(a)(8 points)dataTOD * init_dataTOD(int sec, double val, char* name) (b)(2 points)void free_dataTOD(dataTOD *zapThis){\n} ",
 "Solution": "a)dataTOD * init_dataTOD(int sec, double val, char* name){\n dataTOD * tDta = malloc(sizeof(dataTOD));\n if (tDta == NULL)\n return NULL;\n tDta->seconds = sec;\n tDta->data = val;\n tDta->dataName = malloc((strlen(name)+1)*sizeof(char));\n strcpy(tDta->dataName, name);\n return tDta;\n}\nGrading: 1 point for each line shown above. Assign partial if necessary but assign a whole\nnumber of points.\rb)void free_dataTOD(dataTOD *zapThis){\n free(zapThis->dataName);\n free(zapThis);\n}\nGrading: 1 pt each line"
}